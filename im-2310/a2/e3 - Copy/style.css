/*
  This one CSS file is imported into both index.html AND hosono.html so you need to be careful that it 
  works for both.
*/

*{
  box-sizing: border-box;
  background-origin: border-box;
  margin: 0;
}

:root{
  /* first two colours come from Kuroi's Manga Pallete Palette */
  /* https://lospec.com/palette-list/manga-pallete */
  --col-01:#171219;
  --col-02:#f2fbeb;
  --col-03:#5252ff;
  --col-04:#b6e878;
  font-size: 16px;
  /* scroll behaviour makes the <a> links to ids scroll to position over time rather than immediately */
  scroll-behavior: smooth;
}

body{
  padding: 1rem;
  background-color: var(--col-02);
  color: var(--col-01);
  transition: 2s;
}
/* Here I shortened the duration it would take to switch between light and dark modes as the longer wait time 
caused both me and people I had try out the website to lose patience. The shorter wait time also generates the 
feeling that the program/browser is currently working at optimal conditions to be able to show responses so 
quickly. */

nav {
  margin-top: 1rem;
}

nav li{
  font-size: 1rem;
}

section{
  margin-bottom: 2rem;
}

h1{
  font-size: 3rem;
}

h2{
  font-size: 2rem;
}
/* I had orginally wanted to stagger the transitions of each section; the nav list and summary appears first, then 
the 'Biography', then the 'Bands and collaborations', etc. However, since there was so many <p> and nothing separating 
them, I chose not to do this. It's alright, since it looks much neater for everything to transition together anyways. 
Also, since the website format and design is so simplistic, it's best to keep the SwitchMode transitions simple anyways, 
so as not to appear off balanced with the rest of the website's design. */

p{
  font-size: 1rem;
  margin-top: 1rem;
}

figcaption{
  width: fit-content;
}

dl ul{
  margin-bottom: 0;
}

li{
  font-size: 1rem;
}

dd{
  padding-left: 60px;
}

li ul{
  padding-left: 40px;
}

.img-wrapper{
  width: 100%;
  margin-bottom: 1.5rem;
}

.img-figure{
  display: flex;
  flex-direction: column;
  align-items: center;
}

.article-img{
  width: 80%;
}

.res-columns{
  column-width: 25rem;
}

#mode-button{
  float: right;
  /* note the use of position: sticky to keep the button on the page even with scrolling */
  position: sticky;
  top: 1rem;
}
/* I had originally wanted to make it so that the mode-button fades away when you scroll down and then 
fades back in when you scroll up, but then I saw that Mr. McMahon specifically made it so that the mode-
button remains in the same place so I decided to leave it be. Besides, what if a user wanted to switch modes 
in the middle of reading a section and didn't want to scroll back up? Leaving the position of the mode-button 
where it already is solves that issue. */

/* code for loading page */

#load-body{
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
/* changing button to look like a link */
#load-link{
  line-height: 1rem;
  background-color: transparent;
  border: 0;
  cursor: pointer;
}
/* I have considered having a padding-top implemented in the load link so that when the load-throbber 
appears the heading would not move from its current position on screen. Ultimately, I decided not to 
implement this change because as strange as it would be to have the heading move on screen, it would 
look weirder for there to be such a large gap between the heading and the load-link. Just empty space 
that leaves an irritating feeling that something should be there to fill it. */

/* throbber while page is fake loading */
#load-throbber{
  /* the width, height and background-color give it a shape on the page without any content inside - 
  these value are arbitrary, please change to create your own design  */
  /* we also initially set display to none so it only shows once the link is clicked */
  display: none;
  /* Note to self: change the loading bar and stuff (maybe don't actually use a loading bar, try another 
  throbber), don't just copy Mr. McMahon's example. */
  /* background-color: var(--col-03);
  background-image: linear-gradient(90deg, red 0% 50%, blue 50%);
  background-size: 200%; */
  animation: loading 10s;
  cursor: wait;  
  border: 16px solid var(--col-01);
  border-radius: 50%;
  border-top: 16px solid var(--col-03);
  width: 85px;
  height: 85px;
  animation: spin 1.5s linear infinite;
}
/* I debated between using the 'wait' or the 'progress' cursor but ultimately decided on the former rather than 
the latter. This is because the 'wait' cursor tells users that the program they're using is busy and the interface 
can't be interacted with at least until the cursor returns back to it's normal state. The 'progress' cursor, on the 
other hand, suggests to users that they can still interact with the interface, and that the program is only busy in 
the background. While the throbber is loading, I do not want users to be clicking or messing around, but also wish 
to inform users that they have to be patient and wait, and that something is undergoing a change, and so the 'wait' 
cursors serves to fulfil these needed functions. */

/* Unfortuantely, I could not figure out how to make the 'wait' cursor appear outside of the load-throbber, and so 
when the cursor is moved outside of the area, it reverts back to the normal 'auto' cursor. */

/* The spin speed of the animation was chosen because 1s was too fast and thus appeared both janky and like it was 
going to overtax your computer to run and 2s was too slow and can cause a user's level of impatience to rise. Similarly, 
the width and height of the load-throbber was chosen as it did not appear too big or too small (and thus off-balance 
with the rest of the webpage) while the border sizes were chosen because it (the coloured areas of the load-throbber) 
appeared neither too thick (like a donut) or too thin ( like an earlier version of a donut). */

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
/* I had debated for quite a while what type of load-throbber I would like to implement instead of a loading bar. The 
spinner button, for example, has an animated looping circle and can include the text 'loading...' on it. It however, 
did require for a change in the .html file code, and I would like to be able to meet the challenge of creating an 
effective load-throbber without having to change any other code except the most necessary ones. I then considered having 
a line of growing spinners that appear one after the other continuously. These however, also do require changes in the 
.html file code and not the .css file code, which is where the assignment's required feedback are meant to be coded in. 
In the end, I have decided on this looping circular load-throbber, as it is reminiscent of the looping circle that appears 
next to/or replaces the cursor on older computer programs. This, I hope, together with the 'wait' cursor, triggers memories 
in users that remind them that yes, the program is loading, and that they should wait. */

/* I had wanted to include a percentage within the middle of the load-throbber to inform users how many % of the website has 
already finished loading, but Mr. McMahon purposely chose to use <div> instead of <progress>, and I didn't want to change any 
of the html for this assignment as a challenge. */

/* For the colours of the load-throbber, I chose to stick with the colours already used as part of the website's colour 
palette, as using pre-established colours feel more coherent than introducing new colours as part of the overall design. */

@keyframes loading {
  0% {
  background-position-x: 100%;
  }
  100% {
    background-position-x: 0%;
  }
}

/* Media Queries */

/* medium devices 600 - 992 */
@media only screen and (min-width: 600px) {
  :root{
    font-size: 20px;
  }
  
  .img-wrapper{
    width: 75%;
    margin: 1.5rem auto;
  }

}

/* medium devices 992 + */
@media only screen and (min-width: 992px) {
  :root{
    font-size: 24px;
  }

  .img-wrapper{
    max-width: fit-content;
    float: right;
    margin: 1.5rem;
  }

}

@media (prefers-reduced-motion) {
  :root{
    scroll-behavior: auto;
  }
}